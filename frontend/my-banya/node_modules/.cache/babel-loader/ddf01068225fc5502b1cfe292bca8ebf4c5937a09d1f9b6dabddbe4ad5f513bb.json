{"ast":null,"code":"// redux/slices/apiSlice.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api'\n  }),\n  tagTypes: ['Baths', 'Bookings'],\n  endpoints: builder => ({\n    // --- Получение всех бань ---\n    getBaths: builder.query({\n      query: () => '/baths/',\n      // Убираем transformResponse — бэкенд уже возвращает нужную структуру!\n      providesTags: ['Baths']\n    }),\n    // --- Получение одной бани ---\n    getBathById: builder.query({\n      query: id => `/baths/${id}`,\n      // Аналогично — бэкенд уже возвращает правильные image и images\n      providesTags: ['Bath']\n    }),\n    // --- Создание брони ---\n    createBooking: builder.mutation({\n      query: bookingData => ({\n        url: '/bookings/',\n        method: 'POST',\n        body: bookingData\n      }),\n      invalidatesTags: ['Bookings']\n    })\n  })\n});\nexport const {\n  useGetBathsQuery,\n  useGetBathByIdQuery,\n  useCreateBookingMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getBaths","query","providesTags","getBathById","id","createBooking","mutation","bookingData","url","method","body","invalidatesTags","useGetBathsQuery","useGetBathByIdQuery","useCreateBookingMutation"],"sources":["E:/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["// redux/slices/apiSlice.js\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://127.0.0.1:8000/api' }),\r\n  tagTypes: ['Baths', 'Bookings'],\r\n  endpoints: (builder) => ({\r\n    // --- Получение всех бань ---\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      // Убираем transformResponse — бэкенд уже возвращает нужную структуру!\r\n      providesTags: ['Baths'],\r\n    }),\r\n\r\n    // --- Получение одной бани ---\r\n    getBathById: builder.query({\r\n      query: (id) => `/baths/${id}`,\r\n      // Аналогично — бэкенд уже возвращает правильные image и images\r\n      providesTags: ['Bath'],\r\n    }),\r\n\r\n    // --- Создание брони ---\r\n    createBooking: builder.mutation({\r\n      query: (bookingData) => ({\r\n        url: '/bookings/',\r\n        method: 'POST',\r\n        body: bookingData,\r\n      }),\r\n      invalidatesTags: ['Bookings'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { \r\n  useGetBathsQuery, \r\n  useGetBathByIdQuery, \r\n  useCreateBookingMutation \r\n} = apiSlice;"],"mappings":"AAAA;AACA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAA4B,CAAC,CAAC;EACnEC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,SAAS;MACtB;MACAC,YAAY,EAAE,CAAC,OAAO;IACxB,CAAC,CAAC;IAEF;IACAC,WAAW,EAAEJ,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAGG,EAAE,IAAK,UAAUA,EAAE,EAAE;MAC7B;MACAF,YAAY,EAAE,CAAC,MAAM;IACvB,CAAC,CAAC;IAEF;IACAG,aAAa,EAAEN,OAAO,CAACO,QAAQ,CAAC;MAC9BL,KAAK,EAAGM,WAAW,KAAM;QACvBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,UAAU;IAC9B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXC,gBAAgB;EAChBC,mBAAmB;EACnBC;AACF,CAAC,GAAGrB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}