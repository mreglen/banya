{"ast":null,"code":"// redux/slices/apiSlice.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api'\n  }),\n  tagTypes: ['Baths', 'Bookings'],\n  endpoints: builder => ({\n    // --- Получение всех бань ---\n    getBaths: builder.query({\n      query: () => '/baths/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('API returned non-array for /baths:', response);\n          return [];\n        }\n        return response.map(bath => {\n          var _bath$photos, _bath$photos$;\n          const bathId = bath.bath_id;\n          if (!bathId) {\n            console.warn('Bath without bath_id:', bath);\n            return null;\n          }\n          return {\n            ...bath,\n            bath_id: bathId,\n            image: ((_bath$photos = bath.photos) === null || _bath$photos === void 0 ? void 0 : (_bath$photos$ = _bath$photos[0]) === null || _bath$photos$ === void 0 ? void 0 : _bath$photos$.image_url) || '/img/placeholder.jpg',\n            path: `/baths/${bathId}`,\n            subtitle: bath.title\n          };\n        }).filter(Boolean);\n      },\n      providesTags: ['Baths']\n    }),\n    // --- Создание брони ---\n    createBooking: builder.mutation({\n      query: bookingData => ({\n        url: '/bookings/',\n        method: 'POST',\n        body: bookingData\n      }),\n      invalidatesTags: ['Bookings']\n    })\n  })\n});\nexport const {\n  useGetBathsQuery,\n  useCreateBookingMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getBaths","query","transformResponse","response","Array","isArray","console","error","map","bath","_bath$photos","_bath$photos$","bathId","bath_id","warn","image","photos","image_url","path","subtitle","title","filter","Boolean","providesTags","createBooking","mutation","bookingData","url","method","body","invalidatesTags","useGetBathsQuery","useCreateBookingMutation"],"sources":["E:/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["// redux/slices/apiSlice.js\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://127.0.0.1:8000/api' }),\r\n  tagTypes: ['Baths', 'Bookings'],\r\n  endpoints: (builder) => ({\r\n    // --- Получение всех бань ---\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('API returned non-array for /baths:', response);\r\n          return [];\r\n        }\r\n\r\n        return response.map(bath => {\r\n          const bathId = bath.bath_id;\r\n          if (!bathId) {\r\n            console.warn('Bath without bath_id:', bath);\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...bath,\r\n            bath_id: bathId,\r\n            image: bath.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n            path: `/baths/${bathId}`,\r\n            subtitle: bath.title,\r\n          };\r\n        }).filter(Boolean);\r\n      },\r\n      providesTags: ['Baths'],\r\n    }),\r\n\r\n    // --- Создание брони ---\r\n    createBooking: builder.mutation({\r\n      query: (bookingData) => ({\r\n        url: '/bookings/',\r\n        method: 'POST',\r\n        body: bookingData,\r\n      }),\r\n      invalidatesTags: ['Bookings'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetBathsQuery, useCreateBookingMutation } = apiSlice;"],"mappings":"AAAA;AACA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAA4B,CAAC,CAAC;EACnEC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,SAAS;MACtBC,iBAAiB,EAAGC,QAAQ,IAAK;QAC/B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UAC5BG,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEJ,QAAQ,CAAC;UAC7D,OAAO,EAAE;QACX;QAEA,OAAOA,QAAQ,CAACK,GAAG,CAACC,IAAI,IAAI;UAAA,IAAAC,YAAA,EAAAC,aAAA;UAC1B,MAAMC,MAAM,GAAGH,IAAI,CAACI,OAAO;UAC3B,IAAI,CAACD,MAAM,EAAE;YACXN,OAAO,CAACQ,IAAI,CAAC,uBAAuB,EAAEL,IAAI,CAAC;YAC3C,OAAO,IAAI;UACb;UAEA,OAAO;YACL,GAAGA,IAAI;YACPI,OAAO,EAAED,MAAM;YACfG,KAAK,EAAE,EAAAL,YAAA,GAAAD,IAAI,CAACO,MAAM,cAAAN,YAAA,wBAAAC,aAAA,GAAXD,YAAA,CAAc,CAAC,CAAC,cAAAC,aAAA,uBAAhBA,aAAA,CAAkBM,SAAS,KAAI,sBAAsB;YAC5DC,IAAI,EAAE,UAAUN,MAAM,EAAE;YACxBO,QAAQ,EAAEV,IAAI,CAACW;UACjB,CAAC;QACH,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MACpB,CAAC;MACDC,YAAY,EAAE,CAAC,OAAO;IACxB,CAAC,CAAC;IAEF;IACAC,aAAa,EAAEzB,OAAO,CAAC0B,QAAQ,CAAC;MAC9BxB,KAAK,EAAGyB,WAAW,KAAM;QACvBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,UAAU;IAC9B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,gBAAgB;EAAEC;AAAyB,CAAC,GAAGvC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}