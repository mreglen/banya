{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Убедись, что в .env указан правильный базовый URL\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000';\nexport const createBooking = createAsyncThunk('booking/createBooking', async (bookingData, {\n  rejectWithValue\n}) => {\n  try {\n    // Отправляем на /api/bookings/\n    const response = await axios.post(`${API_BASE_URL}/api/bookings/`, bookingData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    // Логируем ошибку для отладки\n    console.error('Ошибка при бронировании:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Не удалось забронировать баню');\n  }\n});\nconst bookingSlice = createSlice({\n  name: 'booking',\n  initialState: {\n    loading: false,\n    success: false,\n    error: null,\n    booking: null\n  },\n  reducers: {\n    resetBooking: state => {\n      state.loading = false;\n      state.success = false;\n      state.error = null;\n      state.booking = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createBooking.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createBooking.fulfilled, (state, action) => {\n      state.loading = false;\n      state.success = true;\n      state.booking = action.payload;\n    }).addCase(createBooking.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  resetBooking\n} = bookingSlice.actions;\nexport default bookingSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_BASE_URL","import","meta","env","VITE_API_URL","createBooking","bookingData","rejectWithValue","response","post","data","error","_error$response","_error$response2","_error$response2$data","console","detail","bookingSlice","name","initialState","loading","success","booking","reducers","resetBooking","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["E:/ilya/banya/frontend/my-banya/src/redux/slices/bookingSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Убедись, что в .env указан правильный базовый URL\r\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000';\r\n\r\nexport const createBooking = createAsyncThunk(\r\n  'booking/createBooking',\r\n  async (bookingData, { rejectWithValue }) => {\r\n    try {\r\n      // Отправляем на /api/bookings/\r\n      const response = await axios.post(`${API_BASE_URL}/api/bookings/`, bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Логируем ошибку для отладки\r\n      console.error('Ошибка при бронировании:', error.response?.data);\r\n      return rejectWithValue(\r\n        error.response?.data?.detail || 'Не удалось забронировать баню'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nconst bookingSlice = createSlice({\r\n  name: 'booking',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    error: null,\r\n    booking: null,\r\n  },\r\n  reducers: {\r\n    resetBooking: (state) => {\r\n      state.loading = false;\r\n      state.success = false;\r\n      state.error = null;\r\n      state.booking = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createBooking.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(createBooking.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.success = true;\r\n        state.booking = action.payload;\r\n      })\r\n      .addCase(createBooking.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { resetBooking } = bookingSlice.actions;\r\n\r\nexport default bookingSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,YAAY,IAAI,uBAAuB;AAE5E,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CAC3C,uBAAuB,EACvB,OAAOQ,WAAW,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,YAAY,gBAAgB,EAAEM,WAAW,CAAC;IAC/E,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACd;IACAC,OAAO,CAACJ,KAAK,CAAC,0BAA0B,GAAAC,eAAA,GAAED,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,CAAC;IAC/D,OAAOH,eAAe,CACpB,EAAAM,gBAAA,GAAAF,KAAK,CAACH,QAAQ,cAAAK,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBH,IAAI,cAAAI,qBAAA,uBAApBA,qBAAA,CAAsBE,MAAM,KAAI,+BAClC,CAAC;EACH;AACF,CACF,CAAC;AAED,MAAMC,YAAY,GAAGpB,WAAW,CAAC;EAC/BqB,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE,KAAK;IACdV,KAAK,EAAE,IAAI;IACXW,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACd,KAAK,GAAG,IAAI;MAClBc,KAAK,CAACH,OAAO,GAAG,IAAI;IACtB;EACF,CAAC;EACDI,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,aAAa,CAACwB,OAAO,EAAGJ,KAAK,IAAK;MACzCA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACd,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAACvB,aAAa,CAACyB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACJ,OAAO,GAAG,IAAI;MACpBI,KAAK,CAACH,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC,CACDJ,OAAO,CAACvB,aAAa,CAAC4B,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAClDN,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACd,KAAK,GAAGoB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAa,CAAC,GAAGP,YAAY,CAACiB,OAAO;AAEpD,eAAejB,YAAY,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}