{"ast":null,"code":"// redux/slices/apiSlice.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api'\n  }),\n  tagTypes: ['Baths', 'Bookings'],\n  // Добавим тег для инвалидации\n  endpoints: builder => ({\n    // --- Получение бань ---\n    getBaths: builder.query({\n      query: () => '/baths/',\n      transformResponse: response => {\n        return response.map(bath => {\n          var _bath$photos, _bath$photos$;\n          return {\n            ...bath,\n            image: ((_bath$photos = bath.photos) === null || _bath$photos === void 0 ? void 0 : (_bath$photos$ = _bath$photos[0]) === null || _bath$photos$ === void 0 ? void 0 : _bath$photos$.image_url) || '/img/placeholder.jpg' // главное фото\n          };\n        });\n      },\n      providesTags: ['Baths']\n    }),\n    // --- Создание брони ---\n    createBooking: builder.mutation({\n      query: bookingData => ({\n        url: '/bookings/',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: bookingData\n      }),\n      invalidatesTags: ['Bookings'] // чтобы обновить список в админке\n    }),\n    // --- Получение всех броней (для админки) ---\n    getBookings: builder.query({\n      query: () => '/bookings/',\n      providesTags: ['Bookings']\n    })\n  })\n});\n\n// Экспортируем хуки\nexport const {\n  useGetBathsQuery,\n  useCreateBookingMutation,\n  useGetBookingsQuery\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getBaths","query","transformResponse","response","map","bath","_bath$photos","_bath$photos$","image","photos","image_url","providesTags","createBooking","mutation","bookingData","url","method","headers","body","invalidatesTags","getBookings","useGetBathsQuery","useCreateBookingMutation","useGetBookingsQuery"],"sources":["E:/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["// redux/slices/apiSlice.js\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://127.0.0.1:8000/api' }),\r\n  tagTypes: ['Baths', 'Bookings'], // Добавим тег для инвалидации\r\n  endpoints: (builder) => ({\r\n    // --- Получение бань ---\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      transformResponse: (response) => {\r\n        return response.map(bath => ({\r\n          ...bath,\r\n          image: bath.photos?.[0]?.image_url || '/img/placeholder.jpg', // главное фото\r\n        }));\r\n      },\r\n      providesTags: ['Baths'],\r\n    }),\r\n\r\n    // --- Создание брони ---\r\n    createBooking: builder.mutation({\r\n      query: (bookingData) => ({\r\n        url: '/bookings/',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: bookingData,\r\n      }),\r\n      invalidatesTags: ['Bookings'], // чтобы обновить список в админке\r\n    }),\r\n\r\n    // --- Получение всех броней (для админки) ---\r\n    getBookings: builder.query({\r\n      query: () => '/bookings/',\r\n      providesTags: ['Bookings'],\r\n    }),\r\n  }),\r\n});\r\n\r\n// Экспортируем хуки\r\nexport const { \r\n  useGetBathsQuery, \r\n  useCreateBookingMutation,\r\n  useGetBookingsQuery \r\n} = apiSlice;"],"mappings":"AAAA;AACA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAA4B,CAAC,CAAC;EACnEC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAAE;EACjCC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,SAAS;MACtBC,iBAAiB,EAAGC,QAAQ,IAAK;QAC/B,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI;UAAA,IAAAC,YAAA,EAAAC,aAAA;UAAA,OAAK;YAC3B,GAAGF,IAAI;YACPG,KAAK,EAAE,EAAAF,YAAA,GAAAD,IAAI,CAACI,MAAM,cAAAH,YAAA,wBAAAC,aAAA,GAAXD,YAAA,CAAc,CAAC,CAAC,cAAAC,aAAA,uBAAhBA,aAAA,CAAkBG,SAAS,KAAI,sBAAsB,CAAE;UAChE,CAAC;QAAA,CAAC,CAAC;MACL,CAAC;MACDC,YAAY,EAAE,CAAC,OAAO;IACxB,CAAC,CAAC;IAEF;IACAC,aAAa,EAAEb,OAAO,CAACc,QAAQ,CAAC;MAC9BZ,KAAK,EAAGa,WAAW,KAAM;QACvBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEJ;MACR,CAAC,CAAC;MACFK,eAAe,EAAE,CAAC,UAAU,CAAC,CAAE;IACjC,CAAC,CAAC;IAEF;IACAC,WAAW,EAAErB,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,KAAM,YAAY;MACzBU,YAAY,EAAE,CAAC,UAAU;IAC3B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACXU,gBAAgB;EAChBC,wBAAwB;EACxBC;AACF,CAAC,GAAG9B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}