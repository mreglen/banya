{"ast":null,"code":"// src/redux/slices/apiSlice.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api',\n    prepareHeaders: headers => {\n      return headers;\n    }\n  }),\n  tagTypes: ['Baths', 'Massages'],\n  // 👈 Добавили Massages\n\n  endpoints: builder => ({\n    // ========================\n    // 🛁 БАНИ — ОСТАЛОСЬ БЕЗ ИЗМЕНЕНИЙ\n    // ========================\n    getBaths: builder.query({\n      query: () => '/baths/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array, got:', response);\n          return [];\n        }\n        return response.map(bath => {\n          var _bath$photos, _bath$photos$;\n          const bathId = bath.bath_id;\n          if (!bathId) {\n            console.warn('Bath without bath_id:', bath);\n            return null;\n          }\n          return {\n            ...bath,\n            bath_id: bathId,\n            image: ((_bath$photos = bath.photos) === null || _bath$photos === void 0 ? void 0 : (_bath$photos$ = _bath$photos[0]) === null || _bath$photos$ === void 0 ? void 0 : _bath$photos$.image_url) || '/img/placeholder.jpg',\n            path: `/baths/${bathId}`,\n            subtitle: bath.title\n          };\n        }).filter(Boolean);\n      },\n      providesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    getBathById: builder.query({\n      query: id => `/baths/${id}`,\n      transformResponse: response => {\n        var _response$photos, _response$photos$, _response$photos2;\n        if (!response) return null;\n        return {\n          ...response,\n          bath_id: response.bath_id,\n          image: ((_response$photos = response.photos) === null || _response$photos === void 0 ? void 0 : (_response$photos$ = _response$photos[0]) === null || _response$photos$ === void 0 ? void 0 : _response$photos$.image_url) || '/img/placeholder.jpg',\n          images: ((_response$photos2 = response.photos) === null || _response$photos2 === void 0 ? void 0 : _response$photos2.map(p => p.image_url)) || [],\n          path: `/baths/${response.bath_id}`,\n          subtitle: response.title\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Baths',\n        id: arg\n      }] : [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    getMassages: builder.query({\n      query: () => '/massages',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for massages, got:', response);\n          return [];\n        }\n        return response.map(massage => {\n          const massageId = massage.massage_id;\n          if (!massageId) {\n            console.warn('Massage without massage_id:', massage);\n            return null;\n          }\n          return {\n            ...massage,\n            massage_id: massageId,\n            // Явно указываем ключ (на всякий случай)\n            price: `${massage.cost} ₽`,\n            // Форматируем цену как строку: \"1500 ₽\"\n            description: massage.description || 'Описание не доступно',\n            name: massage.name || 'Без названия',\n            path: '/booking' // Пока все массажи ведут на бронирование\n          };\n        }).filter(Boolean); // Убираем null-значения\n      },\n      providesTags: [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    getMassageById: builder.query({\n      query: id => `/massages/${id}`,\n      transformResponse: response => {\n        if (!response) return null;\n        return {\n          ...response,\n          massage_id: response.massage_id,\n          price: `${response.cost} ₽`,\n          description: response.description || 'Описание не доступно',\n          name: response.name || 'Без названия',\n          path: '/booking'\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Massages',\n        id: arg\n      }] : [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetBathsQuery,\n  useGetBathByIdQuery,\n  useGetMassagesQuery,\n  useGetMassageByIdQuery\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","tagTypes","endpoints","builder","getBaths","query","transformResponse","response","Array","isArray","console","error","map","bath","_bath$photos","_bath$photos$","bathId","bath_id","warn","image","photos","image_url","path","subtitle","title","filter","Boolean","providesTags","type","id","getBathById","_response$photos","_response$photos$","_response$photos2","images","p","result","arg","getMassages","massage","massageId","massage_id","price","cost","description","name","getMassageById","useGetBathsQuery","useGetBathByIdQuery","useGetMassagesQuery","useGetMassageByIdQuery"],"sources":["C:/Users/khram/Desktop/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["// src/redux/slices/apiSlice.js\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'http://127.0.0.1:8000/api',\r\n    prepareHeaders: (headers) => {\r\n      return headers;\r\n    },\r\n  }),\r\n  tagTypes: ['Baths', 'Massages'], // 👈 Добавили Massages\r\n\r\n  endpoints: (builder) => ({\r\n    // ========================\r\n    // 🛁 БАНИ — ОСТАЛОСЬ БЕЗ ИЗМЕНЕНИЙ\r\n    // ========================\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array, got:', response);\r\n          return [];\r\n        }\r\n\r\n        return response.map(bath => {\r\n          const bathId = bath.bath_id;\r\n          if (!bathId) {\r\n            console.warn('Bath without bath_id:', bath);\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...bath,\r\n            bath_id: bathId,\r\n            image: bath.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n            path: `/baths/${bathId}`,\r\n            subtitle: bath.title,\r\n          };\r\n        }).filter(Boolean);\r\n      },\r\n      providesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    getBathById: builder.query({\r\n      query: (id) => `/baths/${id}`,\r\n      transformResponse: (response) => {\r\n        if (!response) return null;\r\n\r\n        return {\r\n          ...response,\r\n          bath_id: response.bath_id,\r\n          image: response.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n          images: response.photos?.map(p => p.image_url) || [],\r\n          path: `/baths/${response.bath_id}`,\r\n          subtitle: response.title,\r\n        };\r\n      },\r\n      providesTags: (result, error, arg) =>\r\n        result\r\n          ? [{ type: 'Baths', id: arg }]\r\n          : [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n\r\n    getMassages: builder.query({\r\n      query: () => '/massages',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for massages, got:', response);\r\n          return [];\r\n        }\r\n\r\n        return response.map(massage => {\r\n          const massageId = massage.massage_id;\r\n          if (!massageId) {\r\n            console.warn('Massage without massage_id:', massage);\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...massage,\r\n            massage_id: massageId, // Явно указываем ключ (на всякий случай)\r\n            price: `${massage.cost} ₽`, // Форматируем цену как строку: \"1500 ₽\"\r\n            description: massage.description || 'Описание не доступно',\r\n            name: massage.name || 'Без названия',\r\n            path: '/booking', // Пока все массажи ведут на бронирование\r\n          };\r\n        }).filter(Boolean); // Убираем null-значения\r\n      },\r\n      providesTags: [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    getMassageById: builder.query({\r\n      query: (id) => `/massages/${id}`,\r\n      transformResponse: (response) => {\r\n        if (!response) return null;\r\n\r\n        return {\r\n          ...response,\r\n          massage_id: response.massage_id,\r\n          price: `${response.cost} ₽`,\r\n          description: response.description || 'Описание не доступно',\r\n          name: response.name || 'Без названия',\r\n          path: '/booking',\r\n        };\r\n      },\r\n      providesTags: (result, error, arg) =>\r\n        result\r\n          ? [{ type: 'Massages', id: arg }]\r\n          : [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n  }),\r\n});\r\n\r\n\r\nexport const {\r\n  useGetBathsQuery,\r\n  useGetBathByIdQuery,\r\n  useGetMassagesQuery,     \r\n  useGetMassageByIdQuery, \r\n} = apiSlice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}