{"ast":null,"code":"// redux/slices/apiSlice.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api'\n  }),\n  tagTypes: ['Baths', 'Bookings'],\n  endpoints: builder => ({\n    // --- Получение всех бань ---\n    getBaths: builder.query({\n      query: () => '/baths/',\n      transformResponse: response => {\n        return response.map(bath => {\n          var _bath$photos, _bath$photos$;\n          return {\n            ...bath,\n            // Создаём поле image из первого фото\n            image: ((_bath$photos = bath.photos) === null || _bath$photos === void 0 ? void 0 : (_bath$photos$ = _bath$photos[0]) === null || _bath$photos$ === void 0 ? void 0 : _bath$photos$.image_url) || '/img/placeholder.jpg',\n            // Опционально: можно добавить path\n            path: `/baths/${bath.bath_id}`,\n            // subtitle — можно взять из title\n            subtitle: bath.title\n            // description — с обрезкой, если нужно\n          };\n        });\n      },\n      providesTags: ['Baths']\n    }),\n    // --- Получение одной бани ---\n    getBathById: builder.query({\n      query: id => `/baths/${id}`,\n      transformResponse: response => {\n        var _response$photos, _response$photos$, _response$photos2;\n        return {\n          ...response,\n          image: ((_response$photos = response.photos) === null || _response$photos === void 0 ? void 0 : (_response$photos$ = _response$photos[0]) === null || _response$photos$ === void 0 ? void 0 : _response$photos$.image_url) || '/img/placeholder.jpg',\n          images: ((_response$photos2 = response.photos) === null || _response$photos2 === void 0 ? void 0 : _response$photos2.map(p => p.image_url)) || [],\n          path: `/baths/${response.bath_id}`,\n          subtitle: response.title\n        };\n      },\n      providesTags: ['Bath']\n    }),\n    // --- Создание брони ---\n    createBooking: builder.mutation({\n      query: bookingData => ({\n        url: '/bookings/',\n        method: 'POST',\n        body: bookingData\n      }),\n      invalidatesTags: ['Bookings']\n    })\n  })\n});\nexport const {\n  useGetBathsQuery,\n  useGetBathByIdQuery,\n  useCreateBookingMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getBaths","query","transformResponse","response","map","bath","_bath$photos","_bath$photos$","image","photos","image_url","path","bath_id","subtitle","title","providesTags","getBathById","id","_response$photos","_response$photos$","_response$photos2","images","p","createBooking","mutation","bookingData","url","method","body","invalidatesTags","useGetBathsQuery","useGetBathByIdQuery","useCreateBookingMutation"],"sources":["E:/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["// redux/slices/apiSlice.js\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://127.0.0.1:8000/api' }),\r\n  tagTypes: ['Baths', 'Bookings'],\r\n  endpoints: (builder) => ({\r\n    // --- Получение всех бань ---\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      transformResponse: (response) => {\r\n        return response.map(bath => ({\r\n          ...bath,\r\n          // Создаём поле image из первого фото\r\n          image: bath.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n          // Опционально: можно добавить path\r\n          path: `/baths/${bath.bath_id}`,\r\n          // subtitle — можно взять из title\r\n          subtitle: bath.title,\r\n          // description — с обрезкой, если нужно\r\n        }));\r\n      },\r\n      providesTags: ['Baths'],\r\n    }),\r\n\r\n    // --- Получение одной бани ---\r\n    getBathById: builder.query({\r\n      query: (id) => `/baths/${id}`,\r\n      transformResponse: (response) => {\r\n        return {\r\n          ...response,\r\n          image: response.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n          images: response.photos?.map(p => p.image_url) || [],\r\n          path: `/baths/${response.bath_id}`,\r\n          subtitle: response.title,\r\n        };\r\n      },\r\n      providesTags: ['Bath'],\r\n    }),\r\n\r\n    // --- Создание брони ---\r\n    createBooking: builder.mutation({\r\n      query: (bookingData) => ({\r\n        url: '/bookings/',\r\n        method: 'POST',\r\n        body: bookingData,\r\n      }),\r\n      invalidatesTags: ['Bookings'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { \r\n  useGetBathsQuery, \r\n  useGetBathByIdQuery, \r\n  useCreateBookingMutation \r\n} = apiSlice;"],"mappings":"AAAA;AACA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAA4B,CAAC,CAAC;EACnEC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,SAAS;MACtBC,iBAAiB,EAAGC,QAAQ,IAAK;QAC/B,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI;UAAA,IAAAC,YAAA,EAAAC,aAAA;UAAA,OAAK;YAC3B,GAAGF,IAAI;YACP;YACAG,KAAK,EAAE,EAAAF,YAAA,GAAAD,IAAI,CAACI,MAAM,cAAAH,YAAA,wBAAAC,aAAA,GAAXD,YAAA,CAAc,CAAC,CAAC,cAAAC,aAAA,uBAAhBA,aAAA,CAAkBG,SAAS,KAAI,sBAAsB;YAC5D;YACAC,IAAI,EAAE,UAAUN,IAAI,CAACO,OAAO,EAAE;YAC9B;YACAC,QAAQ,EAAER,IAAI,CAACS;YACf;UACF,CAAC;QAAA,CAAC,CAAC;MACL,CAAC;MACDC,YAAY,EAAE,CAAC,OAAO;IACxB,CAAC,CAAC;IAEF;IACAC,WAAW,EAAEjB,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAGgB,EAAE,IAAK,UAAUA,EAAE,EAAE;MAC7Bf,iBAAiB,EAAGC,QAAQ,IAAK;QAAA,IAAAe,gBAAA,EAAAC,iBAAA,EAAAC,iBAAA;QAC/B,OAAO;UACL,GAAGjB,QAAQ;UACXK,KAAK,EAAE,EAAAU,gBAAA,GAAAf,QAAQ,CAACM,MAAM,cAAAS,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,uBAApBA,iBAAA,CAAsBT,SAAS,KAAI,sBAAsB;UAChEW,MAAM,EAAE,EAAAD,iBAAA,GAAAjB,QAAQ,CAACM,MAAM,cAAAW,iBAAA,uBAAfA,iBAAA,CAAiBhB,GAAG,CAACkB,CAAC,IAAIA,CAAC,CAACZ,SAAS,CAAC,KAAI,EAAE;UACpDC,IAAI,EAAE,UAAUR,QAAQ,CAACS,OAAO,EAAE;UAClCC,QAAQ,EAAEV,QAAQ,CAACW;QACrB,CAAC;MACH,CAAC;MACDC,YAAY,EAAE,CAAC,MAAM;IACvB,CAAC,CAAC;IAEF;IACAQ,aAAa,EAAExB,OAAO,CAACyB,QAAQ,CAAC;MAC9BvB,KAAK,EAAGwB,WAAW,KAAM;QACvBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,UAAU;IAC9B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXC,gBAAgB;EAChBC,mBAAmB;EACnBC;AACF,CAAC,GAAGvC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}