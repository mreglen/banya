{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://127.0.0.1:8000/api' || 'http://127.0.0.1:8000/api',\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Baths', 'Massages', 'Menu', 'Brooms'],\n  endpoints: builder => ({\n    // ========================\n    // 🛁 БАНИ — ПОЛНЫЙ CRUD + ЗАГРУЗКА ФОТО\n    // ========================\n    getBaths: builder.query({\n      query: () => '/baths/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array, got:', response);\n          return [];\n        }\n        return response.map(bath => {\n          var _bath$photos, _bath$photos$;\n          const bathId = bath.bath_id || bath.id;\n          if (!bathId) {\n            console.warn('Bath without bath_id:', bath);\n            return null;\n          }\n          return {\n            ...bath,\n            bath_id: bathId,\n            image: ((_bath$photos = bath.photos) === null || _bath$photos === void 0 ? void 0 : (_bath$photos$ = _bath$photos[0]) === null || _bath$photos$ === void 0 ? void 0 : _bath$photos$.image_url) || '/img/placeholder.jpg',\n            path: `/baths/${bathId}`,\n            subtitle: bath.title\n          };\n        }).filter(Boolean);\n      },\n      providesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    getBathById: builder.query({\n      query: id => `/baths/${id}`,\n      transformResponse: response => {\n        var _response$photos, _response$photos$, _response$photos2;\n        if (!response) return null;\n        return {\n          ...response,\n          bath_id: response.bath_id,\n          image: ((_response$photos = response.photos) === null || _response$photos === void 0 ? void 0 : (_response$photos$ = _response$photos[0]) === null || _response$photos$ === void 0 ? void 0 : _response$photos$.image_url) || '/img/placeholder.jpg',\n          images: ((_response$photos2 = response.photos) === null || _response$photos2 === void 0 ? void 0 : _response$photos2.map(p => p.image_url)) || [],\n          path: `/baths/${response.bath_id}`,\n          subtitle: response.title\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Baths',\n        id: arg\n      }] : [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    createBath: builder.mutation({\n      query: body => ({\n        url: '/baths/',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    updateBath: builder.mutation({\n      query: ({\n        bath_id,\n        ...body\n      }) => ({\n        url: `/baths/${bath_id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    deleteBath: builder.mutation({\n      query: id => ({\n        url: `/baths/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    // 👇 НОВЫЙ ЭНДПОИНТ: ЗАГРУЗКА ФОТО ЧЕРЕЗ ФАЙЛ\n    uploadBathPhotos: builder.mutation({\n      query: ({\n        bath_id,\n        files\n      }) => {\n        const formData = new FormData();\n        files.forEach(file => formData.append('files', file));\n        return {\n          url: `/baths/${bath_id}/upload`,\n          method: 'POST',\n          body: formData\n          // 👇 ВАЖНО: не использовать JSON-сериализацию для FormData!\n          // Это автоматически делается fetch-ом\n        };\n      },\n      invalidatesTags: [{\n        type: 'Baths',\n        id: 'LIST'\n      }]\n    }),\n    // ========================\n    // 💆 МАССАЖИ — ПОЛНЫЙ CRUD\n    // ========================\n    getMassages: builder.query({\n      query: () => '/massages',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for massages, got:', response);\n          return [];\n        }\n        return response.map(massage => ({\n          ...massage,\n          massage_id: massage.massage_id,\n          price: `${massage.cost} ₽`,\n          description: massage.description || 'Описание не доступно',\n          name: massage.name || 'Без названия'\n        }));\n      },\n      providesTags: [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    getMassageById: builder.query({\n      query: id => `/massages/${id}`,\n      transformResponse: response => {\n        if (!response) return null;\n        return {\n          ...response,\n          massage_id: response.massage_id,\n          price: `${response.cost} ₽`,\n          description: response.description || 'Описание не доступно',\n          name: response.name || 'Без названия'\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Massages',\n        id: arg\n      }] : [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    createMassage: builder.mutation({\n      query: body => ({\n        url: '/massages/',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    updateMassage: builder.mutation({\n      query: ({\n        massage_id,\n        ...body\n      }) => ({\n        url: `/massages/${massage_id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    deleteMassage: builder.mutation({\n      query: id => ({\n        url: `/massages/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Massages',\n        id: 'LIST'\n      }]\n    }),\n    // ================\n    // 🍽️ КУХНЯ — КАТЕГОРИИ CRUD\n    // ================\n    getAllMenuItems: builder.query({\n      query: () => '/kitchen/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for kitchen menu, got:', response);\n          return [];\n        }\n        return response.map(item => {\n          var _item$category;\n          return {\n            ...item,\n            id: item.id,\n            price: item.price,\n            category: ((_item$category = item.category) === null || _item$category === void 0 ? void 0 : _item$category.slug) || item.category,\n            name: item.name,\n            description: item.description || 'Идеально дополняет атмосферу бани'\n          };\n        });\n      },\n      providesTags: [{\n        type: 'Menu',\n        id: 'LIST'\n      }]\n    }),\n    getMenuCategories: builder.query({\n      query: () => '/kitchen/categories',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for categories, got:', response);\n          return [];\n        }\n        return response.map(cat => ({\n          id: cat.id,\n          // 👈 теперь используем id для мутаций\n          slug: cat.slug,\n          label: cat.name,\n          name: cat.name,\n          order: cat.order\n        })).sort((a, b) => a.order - b.order);\n      },\n      providesTags: [{\n        type: 'Menu',\n        id: 'CATEGORIES'\n      }]\n    }),\n    createMenuCategory: builder.mutation({\n      query: body => ({\n        url: '/kitchen/categories',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'CATEGORIES'\n      }]\n    }),\n    updateMenuCategory: builder.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/kitchen/categories/${id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'CATEGORIES'\n      }]\n    }),\n    deleteMenuCategory: builder.mutation({\n      query: id => ({\n        url: `/kitchen/categories/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'CATEGORIES'\n      }]\n    }),\n    // ================\n    // 🍽️ КУХНЯ — ТОВАРЫ CRUD\n    // ================\n\n    createMenuItem: builder.mutation({\n      query: body => ({\n        url: '/kitchen/',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'LIST'\n      }]\n    }),\n    updateMenuItem: builder.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/kitchen/${id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'LIST'\n      }]\n    }),\n    deleteMenuItem: builder.mutation({\n      query: id => ({\n        url: `/kitchen/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Menu',\n        id: 'LIST'\n      }]\n    }),\n    // ========================\n    // 🌿 ВЕНИКИ — НОВЫЕ ЭНДПОИНТЫ\n    // ========================\n    getBrooms: builder.query({\n      query: () => '/brooms/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for brooms, got:', response);\n          return [];\n        }\n        return response.map(broom => ({\n          ...broom,\n          id: broom.id,\n          price: broom.price,\n          quantity: broom.quantity,\n          name: broom.name\n        }));\n      },\n      providesTags: [{\n        type: 'Brooms',\n        id: 'LIST'\n      }]\n    }),\n    getBroomById: builder.query({\n      query: id => `/brooms/${id}`,\n      transformResponse: response => {\n        if (!response) return null;\n        return {\n          ...response,\n          id: response.id,\n          price: response.price,\n          quantity: response.quantity,\n          name: response.name\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Brooms',\n        id: arg\n      }] : [{\n        type: 'Brooms',\n        id: 'LIST'\n      }]\n    }),\n    createBroom: builder.mutation({\n      query: body => ({\n        url: '/brooms/',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Brooms',\n        id: 'LIST'\n      }]\n    }),\n    updateBroom: builder.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/brooms/${id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Brooms',\n        id: 'LIST'\n      }]\n    }),\n    deleteBroom: builder.mutation({\n      query: id => ({\n        url: `/brooms/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Brooms',\n        id: 'LIST'\n      }]\n    }),\n    getReservationsByDate: builder.query({\n      query: ({\n        date,\n        bathId\n      }) => {\n        const params = new URLSearchParams();\n        params.append('date', date);\n        if (bathId !== undefined && bathId !== null) {\n          params.append('bath_id', bathId);\n        }\n        return `/admin/reservations/?${params.toString()}`;\n      },\n      providesTags: (result, error, arg) => [{\n        type: 'Reservations',\n        id: arg.date\n      }]\n    }),\n    createReservation: builder.mutation({\n      query: body => ({\n        url: '/admin/reservations/',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Reservations',\n        id: 'LIST'\n      }]\n    }),\n    updateReservation: builder.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/admin/reservations/${id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Reservations',\n        id: 'LIST'\n      }]\n    }),\n    deleteReservation: builder.mutation({\n      query: id => ({\n        url: `/admin/reservations/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Reservations',\n        id: 'LIST'\n      }]\n    }),\n    // ========================\n    // 📄 ЗАЯВКИ С САЙТА — АДМИН\n    // ========================\n\n    getBookings: builder.query({\n      query: () => '/bookings/',\n      transformResponse: response => {\n        if (!Array.isArray(response)) {\n          console.error('Expected array for bookings, got:', response);\n          return [];\n        }\n        return response.map(booking => ({\n          ...booking,\n          // Добавляем удобные поля для UI\n          isUnread: !booking.is_read,\n          formattedDate: new Date(booking.date).toLocaleDateString('ru-RU'),\n          formattedTime: new Date(booking.created_at).toLocaleTimeString('ru-RU', {\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }));\n      },\n      providesTags: [{\n        type: 'Bookings',\n        id: 'LIST'\n      }]\n    }),\n    markBookingAsRead: builder.mutation({\n      query: id => ({\n        url: `/bookings/${id}/mark-read`,\n        method: 'PUT'\n      }),\n      invalidatesTags: [{\n        type: 'Bookings',\n        id: 'LIST'\n      }]\n    }),\n    createBooking: builder.mutation({\n      query: bookingData => ({\n        url: '/bookings/',\n        method: 'POST',\n        body: bookingData\n      }),\n      invalidatesTags: [{\n        type: 'Bookings',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetBathsQuery,\n  useGetBathByIdQuery,\n  useCreateBathMutation,\n  useUpdateBathMutation,\n  useDeleteBathMutation,\n  useUploadBathPhotosMutation,\n  useGetMassagesQuery,\n  useGetMassageByIdQuery,\n  useCreateMassageMutation,\n  useUpdateMassageMutation,\n  useDeleteMassageMutation,\n  useGetAllMenuItemsQuery,\n  useGetMenuByCategoryQuery,\n  useGetMenuCategoriesQuery,\n  useCreateMenuCategoryMutation,\n  useUpdateMenuCategoryMutation,\n  useDeleteMenuCategoryMutation,\n  useCreateMenuItemMutation,\n  useUpdateMenuItemMutation,\n  useDeleteMenuItemMutation,\n  useGetBroomsQuery,\n  useGetBroomByIdQuery,\n  useCreateBroomMutation,\n  useUpdateBroomMutation,\n  useDeleteBroomMutation,\n  useGetReservationsByDateQuery,\n  useCreateReservationMutation,\n  useUpdateReservationMutation,\n  useDeleteReservationMutation,\n  useGetBookingsQuery,\n  useMarkBookingAsReadMutation,\n  useCreateBookingMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getBaths","query","transformResponse","response","Array","isArray","console","error","map","bath","_bath$photos","_bath$photos$","bathId","bath_id","id","warn","image","photos","image_url","path","subtitle","title","filter","Boolean","providesTags","type","getBathById","_response$photos","_response$photos$","_response$photos2","images","p","result","arg","createBath","mutation","body","url","method","invalidatesTags","updateBath","deleteBath","uploadBathPhotos","files","formData","FormData","forEach","file","append","getMassages","massage","massage_id","price","cost","description","name","getMassageById","createMassage","updateMassage","deleteMassage","getAllMenuItems","item","_item$category","category","slug","getMenuCategories","cat","label","order","sort","a","b","createMenuCategory","updateMenuCategory","deleteMenuCategory","createMenuItem","updateMenuItem","deleteMenuItem","getBrooms","broom","quantity","getBroomById","createBroom","updateBroom","deleteBroom","getReservationsByDate","date","params","URLSearchParams","undefined","toString","createReservation","updateReservation","deleteReservation","getBookings","booking","isUnread","is_read","formattedDate","Date","toLocaleDateString","formattedTime","created_at","toLocaleTimeString","hour","minute","markBookingAsRead","createBooking","bookingData","useGetBathsQuery","useGetBathByIdQuery","useCreateBathMutation","useUpdateBathMutation","useDeleteBathMutation","useUploadBathPhotosMutation","useGetMassagesQuery","useGetMassageByIdQuery","useCreateMassageMutation","useUpdateMassageMutation","useDeleteMassageMutation","useGetAllMenuItemsQuery","useGetMenuByCategoryQuery","useGetMenuCategoriesQuery","useCreateMenuCategoryMutation","useUpdateMenuCategoryMutation","useDeleteMenuCategoryMutation","useCreateMenuItemMutation","useUpdateMenuItemMutation","useDeleteMenuItemMutation","useGetBroomsQuery","useGetBroomByIdQuery","useCreateBroomMutation","useUpdateBroomMutation","useDeleteBroomMutation","useGetReservationsByDateQuery","useCreateReservationMutation","useUpdateReservationMutation","useDeleteReservationMutation","useGetBookingsQuery","useMarkBookingAsReadMutation","useCreateBookingMutation"],"sources":["C:/Users/khram/Desktop/ilya/banya/frontend/my-banya/src/redux/slices/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'http://127.0.0.1:8000/api' || 'http://127.0.0.1:8000/api',\r\n    prepareHeaders: (headers) => {\r\n      const token = localStorage.getItem('access_token');\r\n      if (token) {\r\n        headers.set('Authorization', `Bearer ${token}`);\r\n      }\r\n      return headers;\r\n    },\r\n  }),\r\n  tagTypes: ['Baths', 'Massages', 'Menu', 'Brooms'],\r\n\r\n  endpoints: (builder) => ({\r\n    // ========================\r\n    // 🛁 БАНИ — ПОЛНЫЙ CRUD + ЗАГРУЗКА ФОТО\r\n    // ========================\r\n    getBaths: builder.query({\r\n      query: () => '/baths/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array, got:', response);\r\n          return [];\r\n        }\r\n\r\n        return response.map(bath => {\r\n          const bathId = bath.bath_id || bath.id;\r\n          if (!bathId) {\r\n            console.warn('Bath without bath_id:', bath);\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...bath,\r\n            bath_id: bathId,\r\n            image: bath.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n            path: `/baths/${bathId}`,\r\n            subtitle: bath.title,\r\n          };\r\n        }).filter(Boolean);\r\n      },\r\n      providesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    getBathById: builder.query({\r\n      query: (id) => `/baths/${id}`,\r\n      transformResponse: (response) => {\r\n        if (!response) return null;\r\n\r\n        return {\r\n          ...response,\r\n          bath_id: response.bath_id,\r\n          image: response.photos?.[0]?.image_url || '/img/placeholder.jpg',\r\n          images: response.photos?.map(p => p.image_url) || [],\r\n          path: `/baths/${response.bath_id}`,\r\n          subtitle: response.title,\r\n        };\r\n      },\r\n      providesTags: (result, error, arg) =>\r\n        result\r\n          ? [{ type: 'Baths', id: arg }]\r\n          : [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    createBath: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/baths/',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    updateBath: builder.mutation({\r\n      query: ({ bath_id, ...body }) => ({\r\n        url: `/baths/${bath_id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    deleteBath: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/baths/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    // 👇 НОВЫЙ ЭНДПОИНТ: ЗАГРУЗКА ФОТО ЧЕРЕЗ ФАЙЛ\r\n    uploadBathPhotos: builder.mutation({\r\n      query: ({ bath_id, files }) => {\r\n        const formData = new FormData();\r\n        files.forEach(file => formData.append('files', file));\r\n        return {\r\n          url: `/baths/${bath_id}/upload`,\r\n          method: 'POST',\r\n          body: formData,\r\n          // 👇 ВАЖНО: не использовать JSON-сериализацию для FormData!\r\n          // Это автоматически делается fetch-ом\r\n        };\r\n      },\r\n      invalidatesTags: [{ type: 'Baths', id: 'LIST' }],\r\n    }),\r\n\r\n    // ========================\r\n    // 💆 МАССАЖИ — ПОЛНЫЙ CRUD\r\n    // ========================\r\n    getMassages: builder.query({\r\n      query: () => '/massages',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for massages, got:', response);\r\n          return [];\r\n        }\r\n        return response.map(massage => ({\r\n          ...massage,\r\n          massage_id: massage.massage_id,\r\n          price: `${massage.cost} ₽`,\r\n          description: massage.description || 'Описание не доступно',\r\n          name: massage.name || 'Без названия',\r\n        }));\r\n      },\r\n      providesTags: [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    getMassageById: builder.query({\r\n      query: (id) => `/massages/${id}`,\r\n      transformResponse: (response) => {\r\n        if (!response) return null;\r\n        return {\r\n          ...response,\r\n          massage_id: response.massage_id,\r\n          price: `${response.cost} ₽`,\r\n          description: response.description || 'Описание не доступно',\r\n          name: response.name || 'Без названия',\r\n        };\r\n      },\r\n      providesTags: (result, error, arg) =>\r\n        result\r\n          ? [{ type: 'Massages', id: arg }]\r\n          : [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    createMassage: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/massages/',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    updateMassage: builder.mutation({\r\n      query: ({ massage_id, ...body }) => ({\r\n        url: `/massages/${massage_id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    deleteMassage: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/massages/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Massages', id: 'LIST' }],\r\n    }),\r\n\r\n    // ================\r\n    // 🍽️ КУХНЯ — КАТЕГОРИИ CRUD\r\n    // ================\r\n    getAllMenuItems: builder.query({\r\n      query: () => '/kitchen/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for kitchen menu, got:', response);\r\n          return [];\r\n        }\r\n        return response.map(item => ({\r\n          ...item,\r\n          id: item.id,\r\n          price: item.price,\r\n          category: item.category?.slug || item.category,\r\n          name: item.name,\r\n          description: item.description || 'Идеально дополняет атмосферу бани',\r\n        }));\r\n      },\r\n      providesTags: [{ type: 'Menu', id: 'LIST' }],\r\n    }),\r\n    getMenuCategories: builder.query({\r\n      query: () => '/kitchen/categories',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for categories, got:', response);\r\n          return [];\r\n        }\r\n        return response.map(cat => ({\r\n          id: cat.id,          // 👈 теперь используем id для мутаций\r\n          slug: cat.slug,\r\n          label: cat.name,\r\n          name: cat.name,\r\n          order: cat.order,\r\n        })).sort((a, b) => a.order - b.order);\r\n      },\r\n      providesTags: [{ type: 'Menu', id: 'CATEGORIES' }],\r\n    }),\r\n\r\n    createMenuCategory: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/kitchen/categories',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'CATEGORIES' }],\r\n    }),\r\n\r\n    updateMenuCategory: builder.mutation({\r\n      query: ({ id, ...body }) => ({\r\n        url: `/kitchen/categories/${id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'CATEGORIES' }],\r\n    }),\r\n\r\n    deleteMenuCategory: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/kitchen/categories/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'CATEGORIES' }],\r\n    }),\r\n\r\n    // ================\r\n    // 🍽️ КУХНЯ — ТОВАРЫ CRUD\r\n    // ================\r\n\r\n    createMenuItem: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/kitchen/',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'LIST' }],\r\n    }),\r\n\r\n    updateMenuItem: builder.mutation({\r\n      query: ({ id, ...body }) => ({\r\n        url: `/kitchen/${id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'LIST' }],\r\n    }),\r\n\r\n    deleteMenuItem: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/kitchen/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Menu', id: 'LIST' }],\r\n    }),\r\n    // ========================\r\n    // 🌿 ВЕНИКИ — НОВЫЕ ЭНДПОИНТЫ\r\n    // ========================\r\n    getBrooms: builder.query({\r\n      query: () => '/brooms/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for brooms, got:', response);\r\n          return [];\r\n        }\r\n        return response.map(broom => ({\r\n          ...broom,\r\n          id: broom.id,\r\n          price: broom.price,\r\n          quantity: broom.quantity,\r\n          name: broom.name,\r\n        }));\r\n      },\r\n      providesTags: [{ type: 'Brooms', id: 'LIST' }],\r\n    }),\r\n\r\n    getBroomById: builder.query({\r\n      query: (id) => `/brooms/${id}`,\r\n      transformResponse: (response) => {\r\n        if (!response) return null;\r\n        return {\r\n          ...response,\r\n          id: response.id,\r\n          price: response.price,\r\n          quantity: response.quantity,\r\n          name: response.name,\r\n        };\r\n      },\r\n      providesTags: (result, error, arg) =>\r\n        result\r\n          ? [{ type: 'Brooms', id: arg }]\r\n          : [{ type: 'Brooms', id: 'LIST' }],\r\n    }),\r\n\r\n    createBroom: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/brooms/',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Brooms', id: 'LIST' }],\r\n    }),\r\n\r\n    updateBroom: builder.mutation({\r\n      query: ({ id, ...body }) => ({\r\n        url: `/brooms/${id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Brooms', id: 'LIST' }],\r\n    }),\r\n\r\n    deleteBroom: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/brooms/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Brooms', id: 'LIST' }],\r\n    }),\r\n    getReservationsByDate: builder.query({\r\n      query: ({ date, bathId }) => {\r\n        const params = new URLSearchParams();\r\n        params.append('date', date);\r\n        if (bathId !== undefined && bathId !== null) {\r\n          params.append('bath_id', bathId);\r\n        }\r\n        return `/admin/reservations/?${params.toString()}`;\r\n      },\r\n      providesTags: (result, error, arg) => [{ type: 'Reservations', id: arg.date }],\r\n    }),\r\n    createReservation: builder.mutation({\r\n      query: (body) => ({\r\n        url: '/admin/reservations/',\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Reservations', id: 'LIST' }],\r\n    }),\r\n\r\n    updateReservation: builder.mutation({\r\n      query: ({ id, ...body }) => ({\r\n        url: `/admin/reservations/${id}`,\r\n        method: 'PUT',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Reservations', id: 'LIST' }],\r\n    }),\r\n\r\n    deleteReservation: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/admin/reservations/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Reservations', id: 'LIST' }],\r\n    }),\r\n    // ========================\r\n    // 📄 ЗАЯВКИ С САЙТА — АДМИН\r\n    // ========================\r\n\r\n    getBookings: builder.query({\r\n      query: () => '/bookings/',\r\n      transformResponse: (response) => {\r\n        if (!Array.isArray(response)) {\r\n          console.error('Expected array for bookings, got:', response);\r\n          return [];\r\n        }\r\n        return response.map(booking => ({\r\n          ...booking,\r\n          // Добавляем удобные поля для UI\r\n          isUnread: !booking.is_read,\r\n          formattedDate: new Date(booking.date).toLocaleDateString('ru-RU'),\r\n          formattedTime: new Date(booking.created_at).toLocaleTimeString('ru-RU', {\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n          }),\r\n        }));\r\n      },\r\n      providesTags: [{ type: 'Bookings', id: 'LIST' }],\r\n    }),\r\n\r\n    markBookingAsRead: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/bookings/${id}/mark-read`,\r\n        method: 'PUT',\r\n      }),\r\n      invalidatesTags: [{ type: 'Bookings', id: 'LIST' }],\r\n    }),\r\n    createBooking: builder.mutation({\r\n      query: (bookingData) => ({\r\n        url: '/bookings/',\r\n        method: 'POST',\r\n        body: bookingData,\r\n      }),\r\n      invalidatesTags: [{ type: 'Bookings', id: 'LIST' }],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetBathsQuery,\r\n  useGetBathByIdQuery,\r\n\r\n  useCreateBathMutation,\r\n  useUpdateBathMutation,\r\n  useDeleteBathMutation,\r\n  useUploadBathPhotosMutation,\r\n\r\n  useGetMassagesQuery,\r\n  useGetMassageByIdQuery,\r\n\r\n  useCreateMassageMutation,\r\n  useUpdateMassageMutation,\r\n  useDeleteMassageMutation,\r\n\r\n  useGetAllMenuItemsQuery,\r\n  useGetMenuByCategoryQuery,\r\n  useGetMenuCategoriesQuery,\r\n  useCreateMenuCategoryMutation,\r\n  useUpdateMenuCategoryMutation,\r\n  useDeleteMenuCategoryMutation,\r\n\r\n  useCreateMenuItemMutation,\r\n  useUpdateMenuItemMutation,\r\n  useDeleteMenuItemMutation,\r\n\r\n  useGetBroomsQuery,\r\n  useGetBroomByIdQuery,\r\n  useCreateBroomMutation,\r\n  useUpdateBroomMutation,\r\n  useDeleteBroomMutation,\r\n\r\n  useGetReservationsByDateQuery,\r\n  useCreateReservationMutation,\r\n  useUpdateReservationMutation,\r\n  useDeleteReservationMutation,\r\n\r\n  useGetBookingsQuery,\r\n  useMarkBookingAsReadMutation,\r\n  useCreateBookingMutation,\r\n\r\n} = apiSlice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}